#!/usr/bin/env python

#--------------
# XML.py
#--------------

from xml.etree.ElementTree import Element, fromstring, tostring
import sys

x = 1
tot = 0
o = ""

def xml_read(m) :
    s = ""
    for line in m:
        if line == "":
            return False
            continue
        s += line
    #s = "<xml>" + "".join(m) + "</xml>"
    assert(type(s) is str)
    s = "<xml>" + s + "</xml>"
    a = fromstring(s)
    assert(type(a) is Element)
    return a


def numchild (a) :
    n = 0
    for v in a :
        n += 1
    return n

    
def match (a, b) :
    
    if a.tag != b.tag :
        return False
    if numchild (b) == 0 :
        return True
    for v in a :
        if numchild (b) > 0 :
            if match (v, b[0]) == True :
                return True
    return True

def traverse (a, opt) :
    global x
    global tot
    global o
    if match (a, q) == "true" :
        if opt == 0 :
            tot += 1
        else :
            o.write(str(x))

    for v in a :
        x += 1
        traverse(v, opt)

temp = xml_read(sys.stdin)
a = temp
q = a[1]

traverse(a[0], 0)
print(tot)
x = 1
traverse(a[0], 1)
    


   


"""
#def xml_solve(m,


#--------------
# XML.py
#--------------


from xml.etree.ElementTree import Element, fromstring, tostring
import sys

x = 1
tot = 0

def numchild (a) :
    n = 0
    for v in a :
        n += 1
    return n

def match (a, b) :
    if a.tag != b.tag :
        return "false"
    if numchild (b) == 0 :
        return "true"
    for v in a :
        if numchild (b) > 0 :
            if match (v, b[0]) == "true" :
                return "true"
    return "false"

def traverse (a, opt) :
    global x
    global tot
    
    if match (a, q) == "true" :
        if opt == 0 :
            tot += 1
        else :
            print(str(x))

    for v in a :
        x += 1
        traverse(v, opt + "\t") 
"""